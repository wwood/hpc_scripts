#!/usr/bin/env python3
"""
Cluster Usage Monitor

This script analyzes PBS node information and job statistics to provide a summary of:
1. Overall cluster resource usage with ASCII art visualization
2. Nodes running at high CPU/RAM/GPU utilization (>80%)
3. Current user's resource consumption
4. Resource usage by all users in the "microbiome" group
"""

import subprocess
import re
import os
import pwd
import sys
import grp
import argparse
from datetime import datetime
from collections import defaultdict

# ANSI color codes
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def run_command(command):
    """Execute a shell command and return the output."""
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if process.returncode != 0:
        print(f"Error executing command: {command}")
        print(stderr.decode('utf-8'))
        return None
    return stdout.decode('utf-8')

def parse_pbsnodes_output():
    """Parse the output of `pbsnodes -a` into structured resource usage data."""
    output = run_command("pbsnodes -a")
    if not output:
        raise Exception("Failed to run pbsnodes -a")
    nodes = []
    current_node = {}
    node_name = None

    for line in output.splitlines():
        if not line.strip():  # empty line signifies possible end of a node block
            if current_node and node_name:
                nodes.append(current_node)
                current_node = {}
                node_name = None
            continue

        if not line.startswith(" "):  # new node
            if current_node and node_name:
                nodes.append(current_node)
                current_node = {}
            node_name = line.strip()
            current_node["name"] = node_name
            current_node["used_cpu"] = 0
            current_node["total_cpu"] = 0
            current_node["used_mem"] = 0
            current_node["total_mem"] = 0
            current_node["used_gpu"] = 0
            current_node["total_gpu"] = 0
            current_node["state"] = "unknown"
            continue

        line = line.strip()
        if line.startswith("resources_available.ncpus"):
            current_node["total_cpu"] = int(line.split("=")[-1].strip())
        elif line.startswith("resources_assigned.ncpus"):
            current_node["used_cpu"] = int(line.split("=")[-1].strip())
        elif line.startswith("resources_available.mem"):
            kb = int(line.split("=")[-1].strip().replace("kb", ""))
            current_node["total_mem"] = kb // (1024 * 1024)  # convert to GB
        elif line.startswith("resources_assigned.mem"):
            kb = int(line.split("=")[-1].strip().replace("kb", ""))
            current_node["used_mem"] = kb // (1024 * 1024)  # convert to GB
        elif line.startswith("resources_available.ngpus"):
            current_node["total_gpu"] = int(line.split("=")[-1].strip())
        elif line.startswith("resources_assigned.ngpus"):
            current_node["used_gpu"] = int(line.split("=")[-1].strip())
        elif line.startswith("state"):
            current_node["state"] = line.split("=")[-1].strip()

    # Append last node if needed
    if current_node and node_name:
        nodes.append(current_node)

    # Post-processing for percentages
    for node in nodes:
        total_cpu = node["total_cpu"]
        total_mem = node["total_mem"]
        total_gpu = node["total_gpu"]
        used_cpu = node["used_cpu"]
        used_mem = node["used_mem"]
        used_gpu = node["used_gpu"]

        node["cpu_usage"] = (used_cpu / total_cpu * 100) if total_cpu else 0
        node["ram_usage"] = (used_mem / total_mem * 100) if total_mem else 0
        node["gpu_usage"] = (used_gpu / total_gpu * 100) if total_gpu else 0

        # Derive state
        node["state"] = "free" if used_cpu == 0 else "job-busy"

    return nodes

def parse_qstat():
    """Parse qstat output to get job information."""
    # Full format for detailed information
    # Add -t to expand job arrays into individual jobs
    output = run_command("qstat -f -t")
    if not output:
        return []
    
    jobs = []
    current_job = None

    for line in output.splitlines():
        # Match job ID line
        job_match = re.match(r'^Job Id: (.+)$', line)
        if job_match:
            if current_job:
                jobs.append(current_job)
            current_job = {
                'id': job_match.group(1),
                'user': None,
                'ncpus': 0,
                'cpu_usage': 0,
                'mem_usage': 0,
                'gpu_usage': 0,
                'state': None,
                'name': None,
                'mem_req_kb': 0,
            }
            continue

        if not current_job:
            continue

        # Match queue
        queue_match = re.search(r'queue = (.+)', line)
        if queue_match:
            current_job['queue'] = queue_match.group(1)

        # Match job owner
        owner_match = re.search(r'Job_Owner = (.+)@', line)
        if owner_match:
            current_job['user'] = owner_match.group(1)

        # Job name
        name_match = re.search(r'Job_Name = (.+)', line)
        if name_match:
            current_job['name'] = name_match.group(1).strip()

        # qtime
        qtime_match = re.search(r'qtime = (.+)', line)
        if qtime_match:
            current_job['qtime'] = datetime.strptime(qtime_match.group(1).strip(), "%a %b %d %H:%M:%S %Y")

        # stime
        stime_match = re.search(r'stime = (.+)', line)
        if stime_match:
            current_job['stime'] = datetime.strptime(stime_match.group(1).strip(), "%a %b %d %H:%M:%S %Y")

        # Match job state
        state_match = re.search(r'job_state = ([A-Z])', line)
        if state_match:
            current_job['state'] = state_match.group(1)

        # Match resource usage
        if 'resources_used' in line or 'Resource_List' in line:
            # CPU time - not right since e.g. not shown for queued jobs
            # cpu_match = re.search(r'resources_used.cput = (\d+):(\d+):(\d+)', line)
            # if cpu_match:
            #     h, m, s = map(int, cpu_match.groups())
            #     current_job['cpu_usage'] = h * 3600 + m * 60 + s

            # ncpus
            cpu_match = re.search(r'Resource_List.ncpus = (\d+)', line)
            if cpu_match:
                current_job['ncpus'] = int(cpu_match.group(1))

            # CPU percentage
            cpu_match = re.search(r'resources_used.cpupercent = (\d+)', line)
            if cpu_match:
                current_job['cpupercent'] = int(cpu_match.group(1))

            # Memory usage
            if 'resources_used.mem' in line:
                mem_match1 = re.search(r'resources_used.mem = (\d+)kb', line)
                mem_match2 = re.search(r'resources_used.mem = (\d+)gb', line)
                mem_match3 = re.search(r'resources_used.mem = 0b', line)
                if mem_match1:
                    current_job['mem_usage'] = int(mem_match1.group(1))
                elif mem_match2:
                    current_job['mem_usage'] = int(mem_match2.group(1)) * 1024 * 1024
                elif mem_match3:
                    current_job['mem_usage'] = 0
                else:
                    raise Exception("Unknown memory unit from line: " + line)

            # Requested memory
            mem_req_match = re.search(r'Resource_List.mem = (\d+)([a-zA-Z]+)', line)
            if mem_req_match:
                mem_val = int(mem_req_match.group(1))
                unit = mem_req_match.group(2).lower()
                if unit in ('kb', 'k'):
                    mem_kb = mem_val
                elif unit in ('mb', 'm'):
                    mem_kb = mem_val * 1024
                elif unit in ('gb', 'g'):
                    mem_kb = mem_val * 1024 * 1024
                elif unit in ('tb', 't'):
                    mem_kb = mem_val * 1024 * 1024 * 1024
                else:
                    mem_kb = 0
                current_job['mem_req_kb'] = mem_kb
                
            # GPU
            gpu_match = re.search(r'Resource_List.ngpus = (\d+)', line)
            if gpu_match:
                current_job['ngpus'] = int(gpu_match.group(1))

            # walltime
            walltime_match = re.search(r'resources_used.walltime = (\d+):(\d+):(\d+)', line)
            if walltime_match:
                h, m, s = map(int, walltime_match.groups())
                current_job['walltime_used'] = h * 3600 + m * 60 + s

            # Requested walltime
            walltime_match = re.search(r'Resource_List.walltime = (\d+):(\d+):(\d+)', line)
            if walltime_match:
                h, m, s = map(int, walltime_match.groups())
                requested_walltime = h * 3600 + m * 60 + s
                # Deduct the time already used, if already running
                if 'walltime_used' in current_job:
                    current_job['walltime'] = requested_walltime - current_job['walltime_used']
                else:
                    current_job['walltime'] = requested_walltime
                # The true cpu time ncpus * walltime
                current_job['cpu_usage_remaining'] = current_job['ncpus'] * current_job['walltime']
                # gpus
                if 'ngpus' in current_job:
                    current_job['gpu_usage_remaining'] = current_job['ngpus'] * current_job['walltime']
    
    # Add the last job
    if current_job:
        jobs.append(current_job)

    return jobs


def format_duration(seconds):
    """Format a duration in seconds to a short human readable form."""
    if seconds is None:
        return ""
    seconds = int(seconds)
    days, rem = divmod(seconds, 86400)
    hours, rem = divmod(rem, 3600)
    minutes, _ = divmod(rem, 60)
    if days > 0:
        return f"{days}d{hours:02d}h"
    return f"{hours:02d}:{minutes:02d}"


def list_jobs(jobs):
    """Group and list jobs by base name and resources."""
    groups = defaultdict(list)
    now = datetime.now()

    for job in jobs:
        name = job.get('name', '') or ''
        base_name = re.sub(r'\..*', '', name)
        mem_req = job.get('mem_req_kb', 0)
        ncpus = job.get('ncpus', 0)
        key = (base_name, ncpus, mem_req)
        groups[key].append(job)

    group_stats = []
    for (base_name, ncpus, mem_req), job_list in groups.items():
        running = sum(1 for j in job_list if j.get('state') == 'R')
        queued = sum(1 for j in job_list if j.get('state') == 'Q')
        total = len(job_list)
        oldest_age = 0
        oldest_state = ''
        for j in job_list:
            start_time = j.get('stime') if j.get('state') == 'R' else j.get('qtime')
            if start_time:
                age = (now - start_time).total_seconds()
                if age > oldest_age:
                    oldest_age = age
                    oldest_state = j.get('state')
        group_stats.append({
            'name': base_name,
            'ncpus': ncpus,
            'mem_req': mem_req,
            'running': running,
            'queued': queued,
            'total': total,
            'oldest_age': oldest_age,
            'oldest_state': oldest_state,
        })

    # Sort by longest age
    group_stats.sort(key=lambda x: x['oldest_age'], reverse=True)
    top = group_stats[:10]

    # Header
    print(f"{'Job':<30} {'CPU':>3} {'MemGB':>6} {'Run':>4} {'Q':>4} {'Tot':>4} {'Age':>8} {'S':>2} {'Flg':>3}")

    for g in top:
        mem_gb = g['mem_req'] / (1024 * 1024)
        flags = ''
        if g['mem_req'] > 128 * 1024 * 1024:
            flags += 'R'
        if g['ncpus'] > 16:
            flags += 'C'
        age_str = format_duration(g['oldest_age'])
        print(f"{g['name']:<30} {g['ncpus']:>3} {mem_gb:>6.0f} {g['running']:>4} {g['queued']:>4} {g['total']:>4} {age_str:>8} {g['oldest_state'] or '':>2} {flags:>3}")

def get_job_status_counts(jobs):
    """Count jobs by status (running, queued, held)."""
    status_counts = defaultdict(int)
    
    for job in jobs:
        state = job.get('state')
        if state == 'R':
            status_counts['running'] += 1
        elif state == 'Q':
            status_counts['queued'] += 1
        elif state == 'H':
            status_counts['held'] += 1
        else:
            status_counts['other'] += 1
    
    total = sum(status_counts.values())
    running_percent = (status_counts['running'] / total * 100) if total > 0 else 0
    
    return {
        'running': status_counts['running'],
        'queued': status_counts['queued'],
        'held': status_counts['held'],
        'other': status_counts['other'],
        'total': total,
        'running_percent': running_percent
    }

def get_real_name(username):
    """Get the real name for a username."""
    try:
        pwd_entry = pwd.getpwnam(username)
        gecos = pwd_entry.pw_gecos
        real_name = gecos.split(',')[0] if gecos else username
        return real_name if real_name else username
    except KeyError:
        return username

def calculate_cluster_stats(nodes):
    """Calculate summary statistics about cluster usage."""
    total_nodes = len(nodes)
    active_nodes = sum(1 for node in nodes if node['used_cpu'] > 0)
    
    high_cpu_nodes = sum(1 for node in nodes if node['cpu_usage'] >= 80)
    high_ram_nodes = sum(1 for node in nodes if node['ram_usage'] >= 80)
    high_gpu_nodes = sum(1 for node in nodes if node['gpu_usage'] >= 80 and node['total_gpu'] > 0)
    
    total_cpu_cores = sum(node['total_cpu'] for node in nodes)
    used_cpu_cores = sum(node['used_cpu'] for node in nodes)
    
    total_memory_gb = sum(node['total_mem'] for node in nodes)
    used_memory_gb = sum(node['used_mem'] for node in nodes)
    
    total_cpu_only_cores = sum(node['total_cpu'] for node in nodes if node['total_gpu'] == 0)
    used_cpu_only_cores = sum(node['used_cpu'] for node in nodes if node['total_gpu'] == 0)

    total_gpus = sum(node['total_gpu'] for node in nodes)
    used_gpus = sum(node['used_gpu'] for node in nodes)
    
    avg_cpu = sum(node['cpu_usage'] for node in nodes) / total_nodes if total_nodes else 0
    avg_ram = sum(node['ram_usage'] for node in nodes) / total_nodes if total_nodes else 0
    
    # Only include nodes with GPUs in the GPU averages
    gpu_nodes = sum(1 for node in nodes if node['total_gpu'] > 0)
    avg_gpu = sum(node['gpu_usage'] for node in nodes if node['total_gpu'] > 0) / gpu_nodes if gpu_nodes else 0
    
    return {
        'total_nodes': total_nodes,
        'active_nodes': active_nodes,
        'high_cpu_nodes': high_cpu_nodes,
        'high_cpu_percentage': (high_cpu_nodes / total_nodes * 100) if total_nodes else 0,
        'high_ram_nodes': high_ram_nodes,
        'high_ram_percentage': (high_ram_nodes / total_nodes * 100) if total_nodes else 0,
        'high_gpu_nodes': high_gpu_nodes,
        'high_gpu_percentage': (high_gpu_nodes / gpu_nodes * 100) if gpu_nodes else 0,
        'avg_cpu': avg_cpu,
        'avg_ram': avg_ram,
        'avg_gpu': avg_gpu,
        'total_cpu_cores': total_cpu_cores,
        'used_cpu_cores': used_cpu_cores,
        'cpu_utilization': (used_cpu_cores / total_cpu_cores * 100) if total_cpu_cores else 0,
        'total_memory_gb': total_memory_gb,
        'used_memory_gb': used_memory_gb,
        'memory_utilization': (used_memory_gb / total_memory_gb * 100) if total_memory_gb else 0,
        'total_cpu_only_cores': total_cpu_only_cores,
        'used_cpu_only_cores': used_cpu_only_cores,
        'cpu_only_utilization': (used_cpu_only_cores / total_cpu_only_cores * 100) if total_cpu_only_cores else 0,
        'total_gpus': total_gpus,
        'used_gpus': used_gpus,
        'gpu_utilization': (used_gpus / total_gpus * 100) if total_gpus else 0
    }

def get_unix_group_members(group_name):
    """Get all users belonging to a Unix group."""
    try:
        group = grp.getgrnam(group_name)
        return group.gr_mem
    except KeyError:
        print(f"Group '{group_name}' not found")
        return []

def calculate_user_stats(jobs, ignore_interactive=False):
    """Calculate statistics for a specific user or group."""
    if ignore_interactive:
        user_jobs = [job for job in jobs if not job['queue'] in ('cpu_inter_exec','gpu_inter_exec')]
    else:
        user_jobs = jobs
    
    job_status = get_job_status_counts(user_jobs)
    total_jobs = len(user_jobs)
    total_cpu = sum(job['cpu_usage_remaining'] for job in user_jobs)
    total_mem = sum(job['mem_usage'] for job in user_jobs)
    total_gpu = sum(job['gpu_usage'] for job in user_jobs)
    running_cpu = sum(job['ncpus'] for job in user_jobs if job['state'] == 'R')
    running_gpu = sum(job['ngpus'] for job in user_jobs if job['state'] == 'R')
    total_ncpus = sum(job['ncpus'] for job in user_jobs)
    total_ngpus = sum(job['ngpus'] for job in user_jobs)
    total_walltime = sum(job['walltime'] for job in user_jobs)

    # already a %
    # Sometimes get R but no 'cpupercent' key, I guess they are just starting?
    running_cpu_util_total = sum(job['cpupercent'] for job in user_jobs if job['state'] == 'R' and 'cpupercent' in job)
    running_cpu_utilisation = running_cpu_util_total / running_cpu if len(user_jobs) > 0 and running_cpu > 0 else 0

    # speed is roughly running cpus/ Total is cpu_usage_remaining
    eta = total_cpu / running_cpu if running_cpu > 0 else 0
    
    return {
        'job_status': job_status,
        'total_jobs': total_jobs,
        'total_cpu_seconds': total_cpu,
        'total_cpu_hours': total_cpu / 3600,
        'total_memory_kb': total_mem,
        'total_memory_gb': total_mem / (1024 * 1024),
        'total_gpus': total_gpu,
        'avg_cpu_per_job': total_cpu / total_jobs if total_jobs else 0,
        'avg_mem_per_job': total_mem / total_jobs if total_jobs else 0,
        'avg_gpu_per_job': total_gpu / total_jobs if total_jobs else 0,
        'running_cpu': running_cpu,
        'running_gpu': running_gpu,
        'total_ncpus': total_ncpus,
        'total_ngpus': total_ngpus,
        'total_walltime': total_walltime,
        'eta': eta,
        'running_cpu_utilisation': running_cpu_utilisation,
    }

def format_time_hours(seconds, descriptor=""):
    """Format seconds into hours, days, months, years or millenia."""
    hours = seconds / 3600
    descriptor = f" {descriptor}" if descriptor else ""
    if hours >= 876000:  # 1 millenia = 876000 hours
        millenia = hours / 876000
        return f"{millenia:.1f}{descriptor} millenia"
    elif hours >= 8760:  # 1 year = 8760 hours
        years = hours / 8760
        return f"{years:.1f}{descriptor} years"
    elif hours >= 730:  # 1 month = 730 hours (approx)
        months = hours / 730
        return f"{months:.1f}{descriptor} months"
    elif hours >= 24:
        days = hours / 24
        return f"{days:.1f}{descriptor} days"
    else:
        return f"{hours:.1f}{descriptor} hours"

def create_ascii_bar(percentage, width=40, reverse=False, colour_text=None):
    """Create an ASCII progress bar with color based on percentage."""
    filled_width = int(percentage / 100 * width)
    empty_width = width - filled_width
    
    if reverse:
        if percentage < 40:
            color = Colors.RED
        elif percentage < 70:
            color = Colors.YELLOW
        else:
            color = Colors.GREEN
    else:
        if percentage < 50:
            color = Colors.GREEN
        elif percentage < 80:
            color = Colors.YELLOW
        else:
            color = Colors.RED

    bar = f"{color}{'█' * filled_width}{Colors.ENDC}{'░' * empty_width} {percentage:.1f}%"
    if colour_text:
        bar = coloured_text(colour_text, color) + bar
    
    return bar

def coloured_text(text, color):
    """Apply color to text."""
    return f"{color}{text}{Colors.ENDC}"

def parse_qusers_output():
    """
    Parse the qusers output and return a dictionary:
    {
        username: {
            'cpus_running': int,
            'cpus_queued': int,
            'gpus_running': int,
            'gpus_queued': int
        },
        ...
    }
    Only use the #run/#queue pairs under CPUs and GPUs, not the jobs section.
    """
    qusers_text = run_command("qusers")

    users = {}
    lines = qusers_text.splitlines()
    # Find the header line with #run and #queue
    for i, line in enumerate(lines):
        if '#run' in line and '#queue' in line:
            header_idx = i
            break
    else:
        return users  # header not found
    header = lines[header_idx]
    # Find all #run and #queue end indices
    def all_col_end_indices(header, colname):
        idxs = []
        pos = 0
        while True:
            pos = header.find(colname, pos)
            if pos == -1:
                break
            idxs.append(pos + len(colname) - 1)
            pos += len(colname)
        return idxs
    run_ends = all_col_end_indices(header, '#run')
    queue_ends = all_col_end_indices(header, '#queue')
    # Use the 2nd and 3rd pairs: CPUs and GPUs
    if len(run_ends) < 3 or len(queue_ends) < 3:
        return users  # not enough columns found
    cpu_run_end = run_ends[1]
    cpu_queue_end = queue_ends[1]
    gpu_run_end = run_ends[2]
    gpu_queue_end = queue_ends[2]
    # Data starts after the header and separator
    for line in lines[header_idx+2:]:
        if not line.strip() or line.startswith('=') or line.startswith('Totals'):
            continue
        username = line[:line.find('|')].strip()
        def extract_int_backwards(line, end_idx):
            if end_idx is None or end_idx >= len(line):
                return 0
            start = end_idx
            while start >= 0 and line[start] != ' ':
                start -= 1
            val = line[start+1:end_idx+1].strip()
            return int(val) if val.isdigit() else 0
        cpus_running = extract_int_backwards(line, cpu_run_end)
        cpus_queued = extract_int_backwards(line, cpu_queue_end)
        gpus_running = extract_int_backwards(line, gpu_run_end)
        gpus_queued = extract_int_backwards(line, gpu_queue_end)
        users[username] = {
            'cpus_running': cpus_running,
            'cpus_queued': cpus_queued,
            'gpus_running': gpus_running,
            'gpus_queued': gpus_queued
        }
    return users

def main():
    parser = argparse.ArgumentParser(description="Cluster Usage Monitor")
    parser.add_argument('--list', action='store_true', help='Summarise jobs')
    args = parser.parse_args()

    if args.list:
        jobs = parse_qstat()
        list_jobs(jobs)
        return

    # Get node data
    nodes = parse_pbsnodes_output()

    if not nodes:
        print("Failed to gather node information. Check if pbsnodeinfo is available.")
        return

    # Get qusers data
    qusers_stats = parse_qusers_output()

    # Calculate cluster stats
    cluster_stats = calculate_cluster_stats(nodes)

    # Get job data
    jobs = parse_qstat()
    
    # Get microbiome group members
    microbiome_members = get_unix_group_members("microbiome")
    # skip admins
    microbiome_members = [member for member in microbiome_members if member not in [
        'thomsonv',
    ]]
    
    # Calculate user stats
    user_stats = calculate_user_stats(jobs, ignore_interactive=True)
    
    print("\n=== YOU ===")
    if user_stats and user_stats['total_jobs'] > 0:
        job_status = user_stats['job_status']
        # ETA
        print(f"ETA: {format_time_hours(user_stats['eta'])}")
        print(f"Walltime remaining: {format_time_hours(user_stats['total_walltime'])}")
        print(f"CPU hours remaining: {format_time_hours(user_stats['total_cpu_seconds'])}")
        print()
        print(f"Jobs: {job_status['running']} of {job_status['total']} running")
        # print(f"Run:   {create_ascii_bar(job_status['running_percent'], reverse=True)}")
        print(f"{create_ascii_bar(job_status['running_percent'], reverse=True, colour_text='Run:   ')}")
        print(f"{create_ascii_bar(user_stats['running_cpu_utilisation'], reverse=True, colour_text='Util:  ')}")

        if job_status['held'] > 0:
            print(f"Jobs held: {job_status['held']} !!")

        # print(f"Jobs: {job_status['total']} total ({job_status['running']} running, {job_status['queued']} queued, {job_status['held']} held, {job_status['running_percent']:.1f}% running)")
        # print(f"CPU:   {create_ascii_bar(user_stats['running_cpu'] / user_stats['total_ncpus'] * 100)}")
        # if user_stats['total_gpus'] > 0:
        #     print(f"GPU:   {create_ascii_bar(user_stats['running_gpu'] / cluster_stats['total_gpus'] * 100)}")
        # print(f"Total memory usage: {user_stats['total_memory_gb']:.2f} GB")
        # if user_stats['total_gpus'] > 0:
        #     print(f"Total GPU usage: {user_stats['total_gpus']} GPUs")
    else:
        print(f"No batch jobs found.")
    
    print("\n\n=== CMR ===")
    # Calculate overall stats
    microbiome_used_cpu = 0
    microbiome_used_gpu = 0
    microbiome_requested_cpu = 0
    for member, stats in qusers_stats.items():
        if member in microbiome_members:
            microbiome_used_cpu += stats['cpus_running']
            microbiome_used_gpu += stats['gpus_running']
            microbiome_requested_cpu += stats['cpus_running'] + stats['cpus_queued']

    microbiome_cpu_percent = microbiome_used_cpu / cluster_stats['total_cpu_cores'] * 100
    microbiome_gpu_percent = microbiome_used_gpu / cluster_stats['total_gpus'] * 100
    microbiome_cpu_requested_percent = microbiome_used_cpu / microbiome_requested_cpu * 100

    print(f"CPU:   {create_ascii_bar(microbiome_cpu_percent)}")
    if cluster_stats['total_gpus'] > 0 and microbiome_used_gpu > 0:
        print(f"GPU:   {create_ascii_bar(microbiome_gpu_percent)}")

    print(f"Requested CPUs: {microbiome_requested_cpu:,} ({microbiome_cpu_requested_percent:.1f}% running)")
    print()

    # Calculate score for each member: cpus_running + 10 * gpus_running
    scored_members = []
    for member in microbiome_members:
        if member in qusers_stats:
            stats = qusers_stats[member]
            score = stats['cpus_running'] + 10 * stats['gpus_running']
            real_name = get_real_name(member)
            scored_members.append((real_name, stats, score))
    # Sort by score descending and print top 5
    sorted_members = sorted(scored_members, key=lambda x: x[2], reverse=True)[:5]
    
    if scored_members:
        # Print table header
        print(f"{'#':<3} {'Member':<20} {'CPU':>12} {'GPU':>10} {'Score':>6}")
        print(f"{'-'*3:<3} {'-'*20:<20} {'-'*12:>12} {'-'*10:>10} {'-'*6:>6}")
        
        # Print each member with proper alignment
        for i, (member, stats, score) in enumerate(sorted_members, 1):
            cpu_display = f"{stats['cpus_running']:,}/{stats['cpus_running'] + stats['cpus_queued']:,}"
            # Show empty space if no GPUs requested
            total_gpus_requested = stats['gpus_running'] + stats['gpus_queued']
            gpu_display = f"{stats['gpus_running']}/{total_gpus_requested}" if total_gpus_requested > 0 else ""
            print(f"{i:<3} {member:<20} {cpu_display:>12} {gpu_display:>10} {score:>6}")
    else:
        print("No jobs for microbiome group members.")
    
    # Print the report
    print("\n\n=== CLUSTER ===")
    
    # ASCII art utilization bars
    print(f"CPU-all:  {create_ascii_bar(cluster_stats['cpu_utilization'])}")
    print(f"RAM-all:  {create_ascii_bar(cluster_stats['memory_utilization'])}")
    if cluster_stats['total_gpus'] > 0:
        print(f"CPU-only: {create_ascii_bar(cluster_stats['cpu_only_utilization'])}")
        print(f"GPU:      {create_ascii_bar(cluster_stats['gpu_utilization'])}")
    print(f'Nodes:    {create_ascii_bar(cluster_stats["active_nodes"]/cluster_stats["total_nodes"]*100)}')
    
    # Num cpus, total ram, gpus
    ram_tb = cluster_stats['total_memory_gb'] / 1024
    print(f"\nTotal {cluster_stats['total_cpu_cores']:,} CPUs, {ram_tb:.1f} TB RAM, {cluster_stats['total_gpus']} GPUs")

    print()

if __name__ == "__main__":
    main()